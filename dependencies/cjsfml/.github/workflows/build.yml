name: build

on: [push, pull_request]

env:
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  build:
    name: ${{ matrix.preset }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      # Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      matrix:
        preset:
          - linux-release
          - windows-release
        os:
          - ubuntu-latest
          - windows-latest
        include:
          - preset: linux-release
            os: ubuntu-latest
            triplet: x64-linux
            toolchain: /usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
          - preset: windows-release
            os: windows-latest
            triplet: x64-mingw-dynamic
            toolchain: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        exclude:
          - os: ubuntu-latest
            preset: windows-release
          - os: windows-latest
            preset: linux-release

    steps:
    - uses: actions/checkout@v3

    - name: Install CMake
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: "3.31.5"

    - name: Enable GitHub Actions cache
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install CSFML dependencies
      if: runner.os == 'Linux'
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libx11-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libgl1-mesa-dev nasm
        version: 1.0
        execute_install_scripts: true

    - name: Setup w64devkit
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest -Uri "https://github.com/skeeto/w64devkit/releases/download/v2.1.0/w64devkit-x64-2.1.0.exe" -OutFile "w64devkit-x64-2.1.0.exe"
        Start-Process -FilePath "w64devkit-x64-2.1.0.exe" -ArgumentList "-oC:\", "-y" -Wait
        echo "C:\w64devkit\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify w64devkit installation
      if: runner.os == 'Windows'
      run: |
        gcc --version
        g++ --version

    - name: Setup Ninja
      uses: turtlesec-no/get-ninja@main

    - name: Setup Cangjie
      if: runner.os == 'Linux'
      run: |
        curl -L -o Cangjie-0.53.18-linux_x64.tar.gz https://github.com/causerp/cangjie/releases/download/v0.53.18/Cangjie-0.53.18-linux_x64.tar.gz
        tar -xzf Cangjie-0.53.18-linux_x64.tar.gz -C .

    - name: Setup Cangjie
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest -Uri "https://github.com/causerp/cangjie/releases/download/v0.53.18/Cangjie-0.53.18-windows_x64.zip" -OutFile "Cangjie-0.53.18-windows_x64.zip"
        Expand-Archive -Path "Cangjie-0.53.18-windows_x64.zip" -DestinationPath "."

    - name: Download CSFML
      shell: bash
      run: ./download_csfml.sh

    - name: Install vcpkg dependencies
      run: |
        vcpkg install sfml --triplet=${{ matrix.triplet }}

    - name: Build CSFML
      run: |
        cd csfml
        cmake --preset ${{ matrix.preset }} -DCMAKE_TOOLCHAIN_FILE=${{ matrix.toolchain }}
        cmake --build --preset ${{ matrix.preset }} --target install

    - name: Build and test cjsfml
      if: runner.os == 'Linux'
      shell: bash
      run: |
        source ./cangjie/envsetup.sh
        cjpm build
        cjpm test

    - name: Build cjsfml
      if: runner.os == 'Windows'
      run: |
        .\cangjie\envsetup.ps1
        cjpm build
